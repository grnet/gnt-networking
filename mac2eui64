#!/usr/bin/env python
#
# Copyright 2012-2016 GRNET S.A. All rights reserved.
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
#   1. Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer.
#
#   2. Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY GRNET S.A. ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GRNET S.A OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and
# documentation are those of the authors and should not be
# interpreted as representing official policies, either expressed
# or implied, of GRNET S.A.

import sys

from IPy import IP

if len(sys.argv) != 3:
    sys.stderr.write("Usage: %s <mac_address> <IPv6 prefix>\n" % sys.argv[0])
    sys.exit(127)

mac = sys.argv[1]
try:
    prefix = IP(sys.argv[2])
except ValueError:
    sys.stderr.write("Invalid IPv6 prefix '%s'\n" % sys.argv[2])
    sys.exit(1)
    

if prefix.version() != 6:
    sys.stderr.write("%s is not a valid IPv6 prefix\n" % prefix)
    sys.exit(1)

if prefix.prefixlen() != 64:
    sys.stderr.write("Cannot generate an EUI-64 address on a non-64 subnet\n")
    sys.exit(1)

mac_parts = mac.split(":")
pfx_parts = prefix.net().strFullsize().split(":")

if len(mac_parts) != 6:
    sys.stderr.write("%s is not a valid MAC-48 address\n" % mac)
    sys.exit(1)

eui64 = mac_parts[:3] + [ "ff", "fe" ] + mac_parts[3:]

eui64[0] = "%02x" % (int(eui64[0], 16) ^ 0x02)

ip = ":".join(pfx_parts[:4])
for l in range(0, len(eui64), 2):
    ip += ":%s" % "".join(eui64[l:l+2])

try:
    print IP(ip).strCompressed()
except ValueError, e:
    sys.stderr.write("Ooops, something went wrong: '%s'!\n" % str(e))

# vim: set ts=4 sts=4 sw=4 et ai :
